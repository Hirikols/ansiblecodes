---
- hosts: {{host}}
  become: yes
  tasks: 
    

    - name: "Install EPEL-release"
      yum: 
        name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
        state: present
      

    - name: "Install Python"
      yum: 
        name: python-pip
      

    - name: "Install PostgreSQL"
      yum:
        name: 
          - postgresql
          - postgresql-server
          - python-psycopg2
      

    - name: "Find out if PostgreSQL is initialized"
      ansible.builtin.stat:
        path: "{{postgresql_data_directory}}pg_hba.conf"
      register: postgres_data

    - name: "Initialize PostgreSQL"
      shell: "postgresql-setup initdb"
      when: not postgres_data.stat.exists

    - name: "Start and enable services"
      service: name=postgresql state=started enabled=yes
    
    
    - name: "Allow md5 connection for the db user"
      postgresql_pg_hba:
        dest: "{{postgresql_data_directory}}pg_hba.conf"
        contype: host
        databases: all
        method: md5
        users: all
        source: 0.0.0.0/0
        create: true
      become: yes
      become_user: "{{postgresql_main_user}}"
      

    - name: "remove ident 127.0.0.1/32 connection"
      postgresql_pg_hba: 
        dest: "{{postgresql_data_directory}}pg_hba.conf"
        contype: host
        databases: all
        method: ident
        users: all 
        source: 127.0.0.1/32
        state: absent

    - name: "Set listen_address to *"
      lineinfile: 
        dest: "{{postgresql_data_directory}}postgresql.conf"
        regexp: "#listen_addresses = 'localhost'" 
        line: "listen_addresses = '*'" 
        state: present
      
      
    - name: "Set localhost connection to trust *"
      postgresql_pg_hba:
        dest: "{{postgresql_data_directory}}pg_hba.conf"
        contype: local
        databases: all
        method: trust
        users: all
        state: present
      

    - name: "Restart postgresql"
      service: name=postgresql state=restarted 

    - name: "Open 5432/tcp port"
      firewalld:
        port: 5432/tcp
        permanent: yes
        state: enabled
        immediate: yes

    - name: "Create db user"
      postgresql_user:
        state: present
        name: "{{app_user}}"
        password: "{{app_pass}}"
      become: yes
      become_user: "{{postgresql_main_user}}"

    - name: "Create database"
      postgresql_db:
        state: present
        name: "{{app_database}}"
        owner: "{{app_user}}"

    - name: "Copy sql dump file"
      copy:
        src: gitbucket.sql
        dest: /tmp/gitbucket.sql
        mode: '0644'

    - name: "Fill database from dump file"
      postgresql_db:
        name: "{{app_database}}"
        state: restore
        target: /tmp/gitbucket.sql

    - name: "Install Bucardo dependencies"
      yum:
        name: 
          - perl-devel 
          - perl-boolean
          - perl-DBD-Pg
          - postgresql-plperl
          - expect
          - perl-Sys-Syslog
        state: present
     


    - name: "Get dbix_safe"
      get_url: 
        url: "{{Dbix_safe_url}}"
        dest: /tmp/
      

    - name: Create temporary directory
      file: 
        state: directory
        path: /tmp/dbix
      

    - name: Unarchive Dbix_safe
      unarchive:
        src: /tmp/dbix_safe.tar.gz
        dest: /tmp/dbix
        copy: no
     

    - name: Build Dbix MakeFile
      shell: "perl Makefile.PL"
      args:
        chdir: /tmp/dbix/DBIx-Safe-1.2.5/
      

    - name: Make Dbix
      shell: "make"
      args:
        chdir: /tmp/dbix/DBIx-Safe-1.2.5/
      

    - name: Install Dbix
      shell: "sudo make install"
      args:
        chdir: /tmp/dbix/DBIx-Safe-1.2.5/
      

    - name: Download Bucardo
      get_url:
        url: "{{Bucardo_url}}"
        dest: /tmp/
      

    - name: Create temporary directory
      file:
        state: directory
        path: /tmp/bucardo
      

    - name: Unarchive Bucardo
      unarchive:
        src: /tmp/Bucardo-5.3.1.tar.gz
        dest: /tmp/bucardo
        copy: no
      

    - name: Build Bucardo Makefile
      shell: "perl Makefile.PL"
      args:
        chdir: /tmp/bucardo/Bucardo-5.3.1/
      

    - name: Make Bucardo
      shell: "make"
      args:
        chdir: /tmp/bucardo/Bucardo-5.3.1/
    

    - name: Install Bucardo
      shell: "sudo make install"
      args:
        chdir: /tmp/bucardo/Bucardo-5.3.1/
      
    
    - name: Create bucardo log directory
      file:
        state: directory
        path: /var/log/bucardo
  
    - name: Install bucardo
      shell: |
        set timeout 300
        spawn bucardo install --pid-dir /var/run --dbuser "{{postgresql_main_user}}" --dbname "{{postgresql_main_database}}"
        expect "to quit:"
        send P\n
        interact
        exit 0
      args:
        executable: /usr/bin/expect
         
    - name: Add external  master to Bucardo
      shell: "bucardo add database {{'db_name'}} dbname='{{app_database}}' host='{{db3_address}}' user='{{app_user}}' dbpass='{{app_pass}}'"
     
    - name: Add new db as master
      shell: "bucardo add dbgroup gitbucket_group {{'db_name'}}:source"
    
    - name: Restart Bucardo
      shell: "bucardo restart"

- hosts: db1
  become: yes
  tasks:
    - name: "Reload bucardo sync"
      shell: "bucardo reload gitbucket_sync"

- host: loadbalancer
  become: yes
  tasks:
    - name: "Copy HAproxy config"
      template:
        src: /main/haproxy.cfg
        dest: /etc/haproxy/haproxy.cfg
        mode: 0644
    
    - name: "Restart HAproxy"
      service: name=haproxy state=restarted

    - name: "Allow haproxy selinux"
      shell: "grep haproxy /var/log/audit/audit.log | audit2allow -M mypol"

    - name: "Execute haproxy selinux"
      shell: "semodule -i mypol.pp"